const { Builder, By, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const assert = require('assert');

const TEST_PATHS = [
  '/Users/bozhenkas/Downloads/House.of.Cards.US.The.Complete.Series.576p.BluRay.TVShows.Eng.TeamHD/House.of.Cards.US.S01.576p.BluRay.TVShows.Eng.TeamHD/House.of.Cards.US.S01E04.576p.BluRay.TVShows.Eng.TeamHD.mkv',
  '/Users/bozhenkas/Downloads/The_Shawshank_Redemption_1080p.m4v',
  '/Users/bozhenkas/Documents/–°–∫—Ä–∏–Ω—à–æ—Ç—ã/–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ 2025-05-27 –≤ 20.30.24.mov',
];

async function runTest() {
  let driver = await new Builder()
    .forBrowser('chrome')
    // .setChromeOptions(new chrome.Options().addArguments('--headless')) // —É–±–∏—Ä–∞–µ–º headless
    .build();
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    await driver.get('http://localhost:3000');
    await driver.wait(until.titleContains('AirPlay'), 5000);
    const manualInput = await driver.findElement(By.css('.manual-path-input'));
    const openBtn = await driver.findElement(By.xpath("//button[contains(text(),'–û—Ç–∫—Ä—ã—Ç—å –ø–æ –ø—É—Ç–∏')]"));

    for (const testPath of TEST_PATHS) {
      console.log(`\nüîé –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç—å: ${testPath}`);
      await manualInput.clear();
      await manualInput.sendKeys(testPath);
      await openBtn.click();
      await driver.sleep(3000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
      let errorText = '';
      try {
        const errorBlock = await driver.findElement(By.css('.error-message'));
        errorText = await errorBlock.getText();
      } catch (e) {
        // –û—à–∏–±–∫–∏ –Ω–µ—Ç ‚Äî —ç—Ç–æ —Ö–æ—Ä–æ—à–æ
      }
      if (errorText) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${testPath}: ${errorText}`);
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç–∞
        try {
          const video = await driver.findElement(By.css('video'));
          const src = await video.getAttribute('src');
          assert(src && src.includes('api/stream'), '–í–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç src –Ω–∞ —Å—Ç—Ä–∏–º');
          console.log(`‚úÖ –í–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è ${testPath}`);
        } catch (e) {
          console.log(`‚ùå –í–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${testPath}`);
        }
      }
    }
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (e) {
    console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', e.message);
    console.error('üìç –ú–µ—Å—Ç–æ –æ—à–∏–±–∫–∏:', e.stack);
    process.exit(1);
  } finally {
    await driver.quit();
    console.log('üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }
}

runTest(); 